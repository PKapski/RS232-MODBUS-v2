/*
 * IWSKView.java
 */

package iwsk;

import java.awt.event.*;
import java.util.*;
import org.jdesktop.application.Action;
import org.jdesktop.application.*;
import pl.polsl.iwsk.RS232;
import pl.polsl.iwsk.RS232.ResultStatus;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

/**
 * The application's main frame.
 */
public class IWSKView extends JFrame {

    private RS232 rs232;

//    public IWSKView(SingleFrameApplication app) {
//        super(app);
//        int i = 0;
//        super.getFrame().setResizable(false);
//
//        initComponents();
//        rs232 = new RS232();
//        CheckAvaiblePorts();
//    }
    public IWSKView(){
        initComponents();
        rs232 = new RS232();
        CheckAvaiblePorts();
    }

    private void CheckAvaiblePorts() {
        ArrayList<String> list;

        RS232.createSerialPortsArray();
        list = RS232.getPortNamesArray();
        cbPortNumber.removeAllItems();
        for (String s : list) cbPortNumber.addItem(s);
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = IWSKApp.getApplication().getMainFrame();
            aboutBox = new IWSKAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        IWSKApp.getApplication().show(aboutBox);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        ResourceBundle bundle = ResourceBundle.getBundle("iwsk.resources.IWSKView");
        mainPanel = new JPanel();
        cbSpeed = new JComboBox<>();
        cbStopBits = new JComboBox<>();
        cbTerminator = new JComboBox<>();
        cbFlowControl = new JComboBox<>();
        cbDataBits = new JComboBox<>();
        cbPortNumber = new JComboBox<>();
        cbParity = new JComboBox<>();
        lSpeed = new JLabel();
        lStopBits = new JLabel();
        lTerminator = new JLabel();
        lFlowControl = new JLabel();
        lPortNumber = new JLabel();
        lDataBits = new JLabel();
        lParity = new JLabel();
        btnSave = new JButton();
        btnChange = new JButton();
        scrWindowMessage = new JScrollPane();
        tfMessageWindow = new JTextArea();
        tfMessage = new JTextField();
        btnSend = new JButton();
        lbOB = new JLabel();
        lbDA = new JLabel();
        lbDTR = new JLabel();
        lbDSR = new JLabel();
        lbRTS = new JLabel();
        lbCTS = new JLabel();
        lbCD = new JLabel();
        jSeparator2 = new JSeparator();
        lTimeout = new JLabel();
        cbTimeout = new JComboBox<>();
        lbRI = new JLabel();
        btnPing = new JButton();
        btnDTR = new JToggleButton();
        btnRTS = new JToggleButton();
        lbDTRset = new JLabel();
        lbRTSset = new JLabel();
        JMenu fileMenu = new JMenu();
        menuBar = new JMenuBar();
        JMenu helpMenu = new JMenu();
        JMenuItem aboutMenuItem = new JMenuItem();
        JMenuItem exitMenuItem = new JMenuItem();

        //======== mainPanel ========
        {
            mainPanel.setName("mainPanel");
            mainPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder(new javax.swing
            .border.EmptyBorder(0,0,0,0), "JFor\u006dDesi\u0067ner \u0045valu\u0061tion",javax.swing.border.TitledBorder
            .CENTER,javax.swing.border.TitledBorder.BOTTOM,new java.awt.Font("Dia\u006cog",java.
            awt.Font.BOLD,12),java.awt.Color.red),mainPanel. getBorder()))
            ;mainPanel. addPropertyChangeListener(new java.beans.PropertyChangeListener(){@Override public void propertyChange(java.beans.PropertyChangeEvent e
            ){if("bord\u0065r".equals(e.getPropertyName()))throw new RuntimeException();}})
            ;

            //---- cbSpeed ----
            cbSpeed.setModel(new DefaultComboBoxModel<>(new String[] {
                "9600",
                "4800",
                "2400",
                "1200",
                "600",
                "300",
                "150"
            }));
            cbSpeed.setName("cbSpeed");

            //---- cbStopBits ----
            cbStopBits.setModel(new DefaultComboBoxModel<>(new String[] {
                "1",
                "2"
            }));
            cbStopBits.setName("cbStopBits");

            //---- cbTerminator ----
            cbTerminator.setModel(new DefaultComboBoxModel<>(new String[] {
                "CR",
                "LF",
                "CRLF",
                "brak"
            }));
            cbTerminator.setName("cbTerminator");

            //---- cbFlowControl ----
            cbFlowControl.setModel(new DefaultComboBoxModel<>(new String[] {
                "XON/XOFF",
                "RTS/CTS",
                "brak"
            }));
            cbFlowControl.setName("cbFlowControl");

            //---- cbDataBits ----
            cbDataBits.setModel(new DefaultComboBoxModel<>(new String[] {
                "8",
                "7",
                "6",
                "5"
            }));
            cbDataBits.setName("cbDataBits");

            //---- cbPortNumber ----
            cbPortNumber.setModel(new DefaultComboBoxModel<>(new String[] {

            }));
            cbPortNumber.setName("cbPortNumber");
            cbPortNumber.setPreferredSize(new Dimension(94, 30));
            cbPortNumber.setMinimumSize(new Dimension(101, 30));

            //---- cbParity ----
            cbParity.setModel(new DefaultComboBoxModel<>(new String[] {
                "EVEN",
                "ODD",
                "brak"
            }));
            cbParity.setName("cbParity");

            //---- lSpeed ----
            lSpeed.setText(bundle.getString("lSpeed.text"));
            lSpeed.setName("lSpeed");

            //---- lStopBits ----
            lStopBits.setText(bundle.getString("lStopBits.text"));
            lStopBits.setName("lStopBits");

            //---- lTerminator ----
            lTerminator.setText(bundle.getString("lTerminator.text"));
            lTerminator.setName("lTerminator");

            //---- lFlowControl ----
            lFlowControl.setText(bundle.getString("lFlowControl.text"));
            lFlowControl.setName("lFlowControl");

            //---- lPortNumber ----
            lPortNumber.setText(bundle.getString("lPortNumber.text"));
            lPortNumber.setName("lPortNumber");

            //---- lDataBits ----
            lDataBits.setText(bundle.getString("lDataBits.text"));
            lDataBits.setName("lDataBits");

            //---- lParity ----
            lParity.setText(bundle.getString("lParity.text"));
            lParity.setName("lParity");

            //---- btnSave ----
            btnSave.setText(bundle.getString("btnSave.text"));
            btnSave.setName("btnSave");
            btnSave.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    btnSaveMouseClicked(e);
                }
            });

            //---- btnChange ----
            btnChange.setText(bundle.getString("btnChange.text"));
            btnChange.setEnabled(false);
            btnChange.setName("btnChange");
            btnChange.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    btnChangeMouseClicked(e);
                }
            });

            //======== scrWindowMessage ========
            {
                scrWindowMessage.setAutoscrolls(true);
                scrWindowMessage.setName("scrWindowMessage");

                //---- tfMessageWindow ----
                tfMessageWindow.setColumns(15);
                tfMessageWindow.setEditable(false);
                tfMessageWindow.setFont(new Font("Courier", Font.PLAIN, 10));
                tfMessageWindow.setLineWrap(true);
                tfMessageWindow.setRows(5);
                tfMessageWindow.setWrapStyleWord(true);
                tfMessageWindow.setName("tfMessageWindow");
                scrWindowMessage.setViewportView(tfMessageWindow);
            }

            //---- tfMessage ----
            tfMessage.setBackground(new Color(240, 240, 240));
            tfMessage.setText(bundle.getString("tfMessage.text"));
            tfMessage.setEnabled(false);
            tfMessage.setName("tfMessage");
            tfMessage.addKeyListener(new KeyAdapter() {
                @Override
                public void keyPressed(KeyEvent e) {
                    tfMessageKeyPressed(e);
                }
            });

            //---- btnSend ----
            btnSend.setText(bundle.getString("btnSend.text"));
            btnSend.setEnabled(false);
            btnSend.setFocusCycleRoot(true);
            btnSend.setName("btnSend");
            btnSend.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    btnSendMouseClicked(e);
                }
            });

            //---- lbOB ----
            lbOB.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbOB.setText(bundle.getString("lbOB.text"));
            lbOB.setToolTipText(bundle.getString("lbOB.toolTipText"));
            lbOB.setName("lbOB");

            //---- lbDA ----
            lbDA.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbDA.setText(bundle.getString("lbDA.text"));
            lbDA.setToolTipText(bundle.getString("lbDA.toolTipText"));
            lbDA.setName("lbDA");

            //---- lbDTR ----
            lbDTR.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbDTR.setText(bundle.getString("lbDTR.text"));
            lbDTR.setToolTipText(bundle.getString("lbDTR.toolTipText"));
            lbDTR.setName("lbDTR");

            //---- lbDSR ----
            lbDSR.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbDSR.setText(bundle.getString("lbDSR.text"));
            lbDSR.setToolTipText(bundle.getString("lbDSR.toolTipText"));
            lbDSR.setName("lbDSR");

            //---- lbRTS ----
            lbRTS.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbRTS.setText(bundle.getString("lbRTS.text"));
            lbRTS.setToolTipText(bundle.getString("lbRTS.toolTipText"));
            lbRTS.setName("lbRTS");

            //---- lbCTS ----
            lbCTS.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbCTS.setText(bundle.getString("lbCTS.text"));
            lbCTS.setToolTipText(bundle.getString("lbCTS.toolTipText"));
            lbCTS.setName("lbCTS");

            //---- lbCD ----
            lbCD.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbCD.setText(bundle.getString("lbCD.text"));
            lbCD.setToolTipText(bundle.getString("lbCD.toolTipText"));
            lbCD.setName("lbCD");

            //---- jSeparator2 ----
            jSeparator2.setOrientation(SwingConstants.VERTICAL);
            jSeparator2.setName("jSeparator2");

            //---- lTimeout ----
            lTimeout.setText(bundle.getString("lTimeout.text"));
            lTimeout.setName("lTimeout");

            //---- cbTimeout ----
            cbTimeout.setModel(new DefaultComboBoxModel<>(new String[] {
                "0.1",
                "0.2",
                "0.3",
                "0.4",
                "0.5",
                "0.6",
                "0.7",
                "0.8",
                "0.9",
                "1.0",
                "1.1",
                "1.2",
                "1.3",
                "1.4",
                "1.5",
                "1.6",
                "1.7",
                "1.8",
                "1.9",
                "2.0",
                "2.1",
                "2.2",
                "2.3",
                "2.4",
                "2.5",
                "2.6",
                "2.7",
                "2.8",
                "2.9",
                "3.0",
                "3.1",
                "3.2",
                "3.3",
                "3.4",
                "3.5",
                "3.6",
                "3.7",
                "3.8",
                "3.9",
                "4.0",
                "4.1",
                "4.2",
                "4.3",
                "4.4",
                "4.5",
                "4.6",
                "4.7",
                "4.8",
                "4.9",
                "5.0",
                "5.1",
                "5.2",
                "5.3",
                "5.4",
                "5.5",
                "5.6",
                "5.7",
                "5.8",
                "5.9",
                "6.0",
                "6.1",
                "6.2",
                "6.3",
                "6.4",
                "6.5",
                "6.6",
                "6.7",
                "6.8",
                "6.9",
                "7.0",
                "7.1",
                "7.2",
                "7.3",
                "7.4",
                "7.5",
                "7.6",
                "7.7",
                "7.8",
                "7.9",
                "8.0",
                "8.1",
                "8.2",
                "8.3",
                "8.4",
                "8.5",
                "8.6",
                "8.7",
                "8.8",
                "8.9",
                "9.0",
                "9.1",
                "9.2",
                "9.3",
                "9.4",
                "9.5",
                "9.6",
                "9.7",
                "9.8",
                "9.9",
                "10.0"
            }));
            cbTimeout.setName("cbTimeout");

            //---- lbRI ----
            lbRI.setIcon(new ImageIcon(getClass().getResource("/nieustalony.png")));
            lbRI.setText(bundle.getString("lbRI.text"));
            lbRI.setToolTipText(bundle.getString("lbRI.toolTipText"));
            lbRI.setName("lbRI");

            //---- btnPing ----
            btnPing.setText(bundle.getString("btnPing.text"));
            btnPing.setEnabled(false);
            btnPing.setName("btnPing");
            btnPing.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    btnPingMouseClicked(e);
                }
            });

            //---- btnDTR ----
            btnDTR.setText(bundle.getString("btnDTR.text"));
            btnDTR.setEnabled(false);
            btnDTR.setFocusPainted(false);
            btnDTR.setName("btnDTR");
            btnDTR.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    btnDTRMouseClicked(e);
                }
            });

            //---- btnRTS ----
            btnRTS.setFont(new Font("Tahoma", Font.PLAIN, 12));
            btnRTS.setText(bundle.getString("btnRTS.text"));
            btnRTS.setToolTipText(bundle.getString("btnRTS.toolTipText"));
            btnRTS.setEnabled(false);
            btnRTS.setFocusPainted(false);
            btnRTS.setName("btnRTS");
            btnRTS.setPressedIcon(new ImageIcon(getClass().getResource("/zielony.png")));
            btnRTS.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    btnRTSMouseClicked(e);
                }
            });

            //---- lbDTRset ----
            lbDTRset.setText(bundle.getString("lbDTRset.text"));
            lbDTRset.setName("lbDTRset");

            //---- lbRTSset ----
            lbRTSset.setText("RTS");
            lbRTSset.setName("lbRTSset");

            GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
            mainPanel.setLayout(mainPanelLayout);
            mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup()
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup()
                            .addComponent(tfMessage)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup()
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup()
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(lFlowControl)
                                                .addGap(147, 147, 147)
                                                .addComponent(lTimeout, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGroup(mainPanelLayout.createParallelGroup()
                                                    .addComponent(lStopBits, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lParity, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lSpeed, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                                        .addGap(59, 59, 59)
                                                        .addGroup(mainPanelLayout.createParallelGroup()
                                                            .addComponent(cbStopBits, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(cbSpeed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(cbParity, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(cbFlowControl, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE))))
                                                .addGap(39, 39, 39)
                                                .addGroup(mainPanelLayout.createParallelGroup()
                                                    .addComponent(lPortNumber)
                                                    .addComponent(lTerminator)
                                                    .addComponent(lDataBits, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mainPanelLayout.createParallelGroup()
                                            .addComponent(cbPortNumber, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbTerminator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(cbTimeout, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
                                                .addGap(97, 97, 97)
                                                .addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                                                .addGap(37, 37, 37)
                                                .addComponent(btnChange, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cbDataBits, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(scrWindowMessage, GroupLayout.PREFERRED_SIZE, 561, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 4, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup()
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lbOB)
                                .addGap(18, 18, 18)
                                .addComponent(lbDA))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lbDTR)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbDSR))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lbCD)
                                .addGap(18, 18, 18)
                                .addComponent(lbRI))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lbDTRset)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDTR, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lbRTSset)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRTS, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lbRTS)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbCTS, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSend, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPing))
                        .addGap(56, 56, 56))
            );
            mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup()
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(scrWindowMessage, GroupLayout.PREFERRED_SIZE, 272, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup()
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(tfMessage, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lSpeed)
                                    .addComponent(cbSpeed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lDataBits)
                                    .addComponent(cbDataBits, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lStopBits)
                                    .addComponent(cbStopBits, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lTerminator)
                                    .addComponent(cbTerminator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lParity, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbParity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lPortNumber)
                                    .addComponent(cbPortNumber, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup()
                                    .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lFlowControl)
                                        .addComponent(btnSave)
                                        .addComponent(btnChange)
                                        .addComponent(lTimeout)
                                        .addComponent(cbTimeout, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cbFlowControl, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnSend))
                        .addGap(22, 38, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup()
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbOB)
                                    .addComponent(lbDA))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbDTR)
                                    .addComponent(lbDSR))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbRTS)
                                    .addComponent(lbCTS))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbCD)
                                    .addComponent(lbRI))
                                .addGap(18, 18, 18)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbDTRset)
                                    .addComponent(btnDTR, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPanelLayout.createParallelGroup()
                                    .addComponent(lbRTSset)
                                    .addComponent(btnRTS, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                                .addComponent(btnPing)
                                .addGap(181, 181, 181))
                            .addComponent(jSeparator2))
                        .addGap(43, 43, 43))
            );
        }

        //======== fileMenu ========
        {
            fileMenu.setText(bundle.getString("fileMenu.text"));
            fileMenu.setName("fileMenu");

            //======== menuBar ========
            {
                menuBar.setName("menuBar");
            }
            fileMenu.add(menuBar);
        }

        //======== helpMenu ========
        {
            helpMenu.setText(bundle.getString("helpMenu.text"));
            helpMenu.setName("helpMenu");
        }

        //---- aboutMenuItem ----
        aboutMenuItem.setText(bundle.getString("aboutMenuItem.text"));
        aboutMenuItem.setName("aboutMenuItem");

        //---- exitMenuItem ----
        exitMenuItem.setText(bundle.getString("exitMenuItem.text"));
        exitMenuItem.setName("exitMenuItem");
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        String s = "Konfiguracja portu...\n";

        int boundRate = Integer.parseInt((String) cbSpeed.getItemAt(cbSpeed.getSelectedIndex()));
        int dataBits = Integer.parseInt((String) cbDataBits.getItemAt(cbDataBits.getSelectedIndex()));
        String portNumber = (String) cbPortNumber.getItemAt(cbPortNumber.getSelectedIndex());

        int stopBits = 0;
        switch ((cbStopBits.getSelectedIndex())) {
            case 0:
                stopBits = 1;
                break;
            case 1:
                stopBits = 2;
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing type of flow control from comboBox in variable">
        int flowControl = 0;
        switch ((cbFlowControl.getSelectedIndex())) {
            case 0:
                flowControl = 12;
                break;
            case 1:
                flowControl = 3;
                break;
            case 2:
                flowControl = 0;
                break;
        }
// </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing terminator from comboBox in variable">
        String terminator = null;
        switch (cbTerminator.getSelectedIndex()) {
            case 0:
                terminator = "\r";
                break;
            case 1:
                terminator = "\n";
                break;
            case 2:
                terminator = "\r\n";
                break;
            case 3:
                terminator = "";
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing parity from comboBox in variable">
        int parity = 0;
        switch (cbParity.getSelectedIndex()) {
            case 0:
                parity = 2;
                break;
            case 1:
                parity = 1;
                break;
            case 2:
                parity = 0;
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing timeout from comboBox in variable">
        int timeout = (int) (Float.parseFloat((String) cbTimeout.getItemAt(cbTimeout.getSelectedIndex())) * 1000);
        // </editor-fold>
        ResultStatus result = rs232.openSerialPort(terminator, parity, timeout, portNumber, boundRate, dataBits, stopBits, flowControl);
        switch (result) {
            case OK: {
                btnSave.setEnabled(false);
                btnChange.setEnabled(true);
                btnSend.setEnabled(true);
                btnPing.setEnabled(true);
                btnDTR.setEnabled(true);
                btnRTS.setEnabled(true);

                cbFlowControl.setEnabled(false);
                cbParity.setEnabled(false);
                cbPortNumber.setEnabled(false);
                cbSpeed.setEnabled(false);
                cbStopBits.setEnabled(false);
                cbTerminator.setEnabled(false);
                cbDataBits.setEnabled(false);
                cbTimeout.setEnabled(false);


                tfMessage.setEnabled(true);
                tfMessage.setBackground(new Color(255, 255, 255));

                s += "Konfiguracja przebiegła pomyślnie.\n";
                s += "[" + cbPortNumber.getSelectedItem().toString() + ", ";
                s += cbSpeed.getSelectedItem().toString() + "bps, ";
                s += cbStopBits.getSelectedItem().toString() + "b stopu, ";
                s += cbDataBits.getSelectedItem().toString() + "b danych, ";
                s += cbFlowControl.getSelectedItem().toString() + ", ";
                s += cbParity.getSelectedItem().toString() + ", ";
                s += cbTerminator.getSelectedItem().toString() + ", ";
                s += cbTimeout.getSelectedItem().toString() + "s] \r\n";

                ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
                lbDA.setIcon(resourceMap.getIcon("false.icon"));
                lbOB.setIcon(resourceMap.getIcon("true.icon"));
                if (rs232.getPort().isCD())
                    lbCD.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbCD.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isCTS())
                    lbCTS.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbCTS.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isDSR())
                    lbDSR.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbDSR.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isRI())
                    lbRI.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbRI.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isDTR())
                    lbDTR.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbDTR.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isRTS())
                    lbRTS.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbRTS.setIcon(resourceMap.getIcon("false.icon"));
                break;
            }
            case IN_USE: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wybrany port jest w danej chwili używany\r\n";
                break;
            }
            case NOT_FOUND: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wybrany port nie istnieje\r\n";
                break;
            }
            case STREAM_ERROR: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wystąpił problem podczas otwierania portu\r\n";
                break;
            }
            case EXCESSIVE_LISTENERS: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wystąpił problem podczas ustawiania nasłuchu zdarzeń\r\n";
                break;
            }
        }

        tfMessageWindow.setText(s);
        tfMessage.requestFocusInWindow();
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeMouseClicked
        btnSave.setEnabled(true);
        btnChange.setEnabled(false);
        btnSend.setEnabled(false);
        btnPing.setEnabled(false);
        btnDTR.setEnabled(false);
        btnRTS.setEnabled(false);

        cbFlowControl.setEnabled(true);
        cbParity.setEnabled(true);
        cbPortNumber.setEnabled(true);
        cbSpeed.setEnabled(true);
        cbStopBits.setEnabled(true);
        cbTerminator.setEnabled(true);
        cbDataBits.setEnabled(true);
        cbTimeout.setEnabled(true);

        tfMessage.setEnabled(false);
        tfMessage.setBackground(new Color(240, 240, 240));

        ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        lbDA.setIcon(resourceMap.getIcon("unknown.icon"));
        lbCD.setIcon(resourceMap.getIcon("unknown.icon"));
        lbCTS.setIcon(resourceMap.getIcon("unknown.icon"));
        lbOB.setIcon(resourceMap.getIcon("unknown.icon"));
        lbDSR.setIcon(resourceMap.getIcon("unknown.icon"));
        lbDTR.setIcon(resourceMap.getIcon("unknown.icon"));
        lbRI.setIcon(resourceMap.getIcon("unknown.icon"));
        lbRTS.setIcon(resourceMap.getIcon("unknown.icon"));

        rs232.closeSerialPort();

    }//GEN-LAST:event_btnChangeMouseClicked

    private void btnSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMouseClicked
        if (IWSKView.tfMessage.getText().length() <= 50) {
            new Thread(rs232.getSendThread(IWSKView.tfMessage.getText())).start();
            tfMessage.requestFocusInWindow();
            scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
        } else {
            JOptionPane.showMessageDialog(null, "Wiadomość nie może przekraczać 50znaków",
                    "Zbyt długa wiadomość", JOptionPane.WARNING_MESSAGE);
            tfMessage.setText("");
        }


    }//GEN-LAST:event_btnSendMouseClicked

    private void tfMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfMessageKeyPressed

        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER && !rs232.getLineTerminator().equals("")) {
            if (IWSKView.tfMessage.getText().length() <= 50) {
                new Thread(rs232.getSendThread(IWSKView.tfMessage.getText())).start();
                tfMessage.requestFocusInWindow();
                scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
            } else {
                JOptionPane.showMessageDialog(null, "Wiadomość nie może przekraczać 50znaków",
                        "Zbyt długa wiadomość", JOptionPane.WARNING_MESSAGE);
                tfMessage.setText("");
            }
        } else if (rs232.getLineTerminator().equals("") && (((evt.getKeyCode() >= 32) && (evt.getKeyCode() <= 127)) ||
                (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER))) {
            new Thread(rs232.getSendThread(String.valueOf(evt.getKeyChar()))).start();
            scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
        }
    }//GEN-LAST:event_tfMessageKeyPressed

    private void rbASCIIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbASCIIMouseClicked
        rs232.setDisplayType(RS232.DisplayType.ASCII);
    }//GEN-LAST:event_rbASCIIMouseClicked

    private void rbHexMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbHexMouseClicked
        rs232.setDisplayType(RS232.DisplayType.HEX);
    }//GEN-LAST:event_rbHexMouseClicked

    private void btnPingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPingMouseClicked
        new Thread(rs232.getSendThread(String.valueOf('\2'))).start();
        tfMessage.requestFocusInWindow();
    }//GEN-LAST:event_btnPingMouseClicked

    private void btnDTRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDTRMouseClicked
        ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        if (!btnDTR.isSelected()) {
            rs232.getPort().setDTR(true);
            lbDTR.setIcon(resourceMap.getIcon("true.icon"));
        } else {
            rs232.getPort().setDTR(false);
            lbDTR.setIcon(resourceMap.getIcon("false.icon"));
        }
    }//GEN-LAST:event_btnDTRMouseClicked

    private void btnRTSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRTSMouseClicked
        ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        if (!btnRTS.isSelected()) {
            rs232.getPort().setRTS(true);
            lbRTS.setIcon(resourceMap.getIcon("true.icon"));
        } else {
            rs232.getPort().setRTS(false);
            lbRTS.setIcon(resourceMap.getIcon("false.icon"));
        }
    }//GEN-LAST:event_btnRTSMouseClicked

    // Variables declaration - dpublic statico not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    public static JPanel mainPanel;
    public static JComboBox<String> cbSpeed;
    public static JComboBox<String> cbStopBits;
    public static JComboBox<String> cbTerminator;
    public static JComboBox<String> cbFlowControl;
    public static JComboBox<String> cbDataBits;
    public static JComboBox<String> cbPortNumber;
    public static JComboBox<String> cbParity;
    public static JLabel lSpeed;
    public static JLabel lStopBits;
    public static JLabel lTerminator;
    public static JLabel lFlowControl;
    public static JLabel lPortNumber;
    public static JLabel lDataBits;
    public static JLabel lParity;
    public static JButton btnSave;
    public static JButton btnChange;
    public static JScrollPane scrWindowMessage;
    public static JTextArea tfMessageWindow;
    public static JTextField tfMessage;
    public static JButton btnSend;
    public static JLabel lbOB;
    public static JLabel lbDA;
    public static JLabel lbDTR;
    public static JLabel lbDSR;
    public static JLabel lbRTS;
    public static JLabel lbCTS;
    public static JLabel lbCD;
    public static JSeparator jSeparator2;
    public static JLabel lTimeout;
    public static JComboBox<String> cbTimeout;
    public static JLabel lbRI;
    public static JButton btnPing;
    public static JToggleButton btnDTR;
    public static JToggleButton btnRTS;
    public static JLabel lbDTRset;
    public static JLabel lbRTSset;
    public static JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables


    private JDialog aboutBox;
}
